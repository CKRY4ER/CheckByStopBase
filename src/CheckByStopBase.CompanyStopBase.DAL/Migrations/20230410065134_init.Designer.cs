// <auto-generated />
using System;
using CheckByStopBase.CompanyStopBase.DAL.Migrator.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CheckByStopBase.CompanyStopBase.DAL.Migrations
{
    [DbContext(typeof(CompanySchemaMigratorDbContext))]
    [Migration("20230410065134_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CheckByStopBase.CompanyStopBase.Domain.Entities.CompanyRegistry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("add_date");

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("company_type");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("tax_number");

                    b.HasKey("Id");

                    b.HasIndex("TaxNumber");

                    b.ToTable("company_registry", (string)null);
                });

            modelBuilder.Entity("CheckByStopBase.CompanyStopBase.Domain.Entities.CompanyReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Partner")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("partner");

                    b.HasKey("Id");

                    b.ToTable("company_report", (string)null);
                });

            modelBuilder.Entity("CheckByStopBase.CompanyStopBase.Domain.Entities.CompanyReportPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("company_type");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("TaxNumber");

                    b.ToTable("company_report_position", (string)null);
                });

            modelBuilder.Entity("CheckByStopBase.CompanyStopBase.Domain.Entities.CompanyReportPosition", b =>
                {
                    b.HasOne("CheckByStopBase.CompanyStopBase.Domain.Entities.CompanyReport", "Report")
                        .WithMany("Companies")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("CheckByStopBase.CompanyStopBase.Domain.Entities.CompanyReport", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
